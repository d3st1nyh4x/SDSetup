<!-- Copyright (c) 2018 noahc3
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
@page  "/console"

@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.IUriHelper UriHelper

@if (!gettingZip) {

<div>

	<div class="ui info message">
		<p>
			Want to hack your Switch but not sure what to do? Check out the official SDSetup guide: <a href="https://switch.homebrew.guide">https://switch.homebrew.guide</a>
		</p>
	</div>

	@if (zipDoneMessage == true) {
		<div class="ui success message">
			<i class="close icon" @onclick="@(() => zipDoneMessage = false)"></i>
			<div class="header">
				Operation Completed
			</div>
			<p>Your ZIP file should download within the next few seconds!</p>
		</div>
	}

	@if (firefoxMessage == true) {
		<div class="ui success message">
			<i class="close icon" @onclick="@(() => firefoxMessage = false)"></i>
			<div class="header">
				Firefox Notice:
			</div>
			<p>
				Your Firefox is outdated and has some issues. Do the following to get your ZIP:<br />
				1. Copy the following URL: <b>@blobUrl</b><br />
				2. Open a new tab (do not use this tab!)<br />
				3. Paste the copied URL into the address bar<br />
				You can avoid this in the future by updating Firefox to version 62 or higher.
			</p>
		</div>
	}

	@if (saveMessage) {
		<div class="ui success message">
			<i class="close icon" @onclick="@(() => saveMessage = false)"></i>
			<div class="header">
				Want to redownload in the future?
			</div>
			<p style="color:red;">
				Save the following URL somewhere to immediately have the same packages pre-selected in the future:<br />
			</p>
			<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
				<tbody>
					<tr>
						<th scope="row" style="color:red;">@saveUrl</th>
					</tr>
				</tbody>
			</BlazorTable>
		</div>
	}

	@if (selectMore) {
		<div class="ui negative message">
			<i class="close icon" @onclick="@(() => selectMore = false)"></i>
			<div class="header">
				No packages are selected.
			</div>
		</div>
	}

	<h1 style="text-align:center">@G.manifest.Platforms[G.consoleId].Name</h1>

	@if (!G.initialized) {
		<h2>Page is loading, please wait...</h2>
	} else {

		<div class="docs-example">
			<h3 style="margin-bottom:0.5em">Pre-configured bundles</h3>
			<Card CardType="CardType.Deck" Class="justify-content-center">
				@foreach (Bundle b in G.manifest.Platforms[G.consoleId].Bundles) {
					<Card style="margin-bottom:2rem">
						<Card CardType="CardType.Body">
							<Card CardType="CardType.Title">@b.Name</Card>
							@b.Description
						</Card>
						<button class="fluid ui @G.manifest.Platforms[G.consoleId].Color button" style="margin:1.2rem;margin-top:0;width:auto" @onclick="@(() => G.SelectByList(b.Packages))">Select</button>
					</Card>
				}
			</Card>

		</div>

		@foreach (PackageSection sec in G.manifest.Platforms[G.consoleId].PackageSections.Values) {
            <UIPackageSection Section="@sec"></UIPackageSection>
            Console.WriteLine("Yeet3");
        }

		<button class="fluid ui @G.manifest.Platforms[G.consoleId].Color button" style="margin-bottom:1.5rem;" @onclick="@(() => downloadZip())">Download your ZIP</button>
	}

</div>
	} else {
	<div class="ui active dimmer" style="height:100%;width:100%">
		<div class="ui massive text loader">
			<div id="infoh" style="margin-bottom:2rem">Building your ZIP, please wait...</div>
		</div>
		<div class="ui negative message" style="width:90%;position:absolute;bottom:5%">
			<div class="header fluid">
				This might take a while. If the progress stalls for more than a minute, please report it on <a href="https://github.com/d3st1nyh4x/SDSetup/issues">GitHub</a>
			</div>
		</div>
	</div>
	}



	@functions {

        private static bool localInitialized = false;

        public static Action ForceUiRefresh;

        public static bool gettingZip = false;

        private static bool zipDoneMessage = false;
        private static bool firefoxMessage = false;
        private static bool saveMessage = false;
        private static bool selectMore = false;

        private static List<string> gottenPackages;

        private static bool b = false;

        private static string blobUrl = "";
        private static string saveUrl = "";

        private static List<string> preenabled;

        static int total = 3;
        static int current = 0;
        static bool barMode = true;

        protected override void OnInit() {
            string a = UriHelper.GetAbsoluteUri().Split('?')[1];
            if (a.Contains('#')) a = a.Split('#')[0];
            G.consoleId = a;
            Shared.MainLayout.ForceUiRefresh();
            if (localInitialized == false) {
                if (!G.selectedPackages.ContainsKey(G.consoleId)) G.selectedPackages[G.consoleId] = new Dictionary<string, bool>();
                if (!G.manifest.Platforms.ContainsKey(G.consoleId)) UriHelper.NavigateTo("");
            }
        }

        protected override async Task OnInitAsync() {
            UriHelper.OnLocationChanged += OnLocationChanged;
            if (ForceUiRefresh == null) {
                ForceUiRefresh = new Action(() => StateHasChanged());
            }
            if (localInitialized == false) {
                localInitialized = true;
            }
        }

        private void OnLocationChanged(object sender, LocationChangedEventArgs e) {
            Console.WriteLine(UriHelper.GetAbsoluteUri());

            if (G.initialized) {
                if (UriHelper.GetAbsoluteUri().Contains("/console?")) {
                    zipDoneMessage = false;
                    firefoxMessage = false;
                    saveMessage = false;
                    selectMore = false;
                    string a = UriHelper.GetAbsoluteUri().Split('?')[1];
                    if (a.Contains('#')) a = a.Split('#')[0];
                    G.consoleId = a;
                    G.SelectByUrl(UriHelper.GetAbsoluteUri());
                    StateHasChanged();
                    Shared.MainLayout.ForceUiRefresh();
                }

            }
        }



        private string SetConsoleId() {
            string a = UriHelper.GetAbsoluteUri().Split('?')[1];
            if (a.Contains('#')) a = a.Split('#')[0];
            G.consoleId = a;
            return "";
        }

        private void checkClicked(string id) {
            G.selectedPackages[G.consoleId][id] = !G.selectedPackages[G.consoleId][id];
            StateHasChanged();
        }

        //TODO: Move this to package

        private void RecursivelyFindDependencies(Package p) {
            if (!gottenPackages.Contains(p.ID)) {
                gottenPackages.Add(p.ID);
            }
            foreach (string k in p.Dependencies) RecursivelyFindDependencies(G.packages[G.consoleId][k]);
        }

        [JSInvokable]
        public static void AddProgress() {
            current++;
            ForceUiRefresh();
        }

        // due to many issues, this has to go here and not in global :/
        private async void downloadZip() {

            gettingZip = true;
            zipDoneMessage = false;
            firefoxMessage = false;
            saveMessage = false;
            selectMore = false;
            current = 0;

            gottenPackages = new List<string>();

            foreach (KeyValuePair<string, bool> k in G.selectedPackages[G.consoleId]) {
                if (k.Value && G.CanDownload(G.packages[G.consoleId][k.Key].When, G.packages[G.consoleId][k.Key].WhenMode)) {
                    //finalArtifacts.AddRange(getArtifacts(G.packages[G.consoleId][k.Key]));
                    RecursivelyFindDependencies(G.packages[G.consoleId][k.Key]);
                }
            }

            if (gottenPackages.Count == 0) {
                selectMore = true;
                gettingZip = false;
                StateHasChanged();
                await ZipHelpers.ScrollToTop(jsRuntime);
            }

            gottenPackages = gottenPackages.OrderBy(x => G.packages[G.consoleId][x].Priority).ToList();

            string packages = "";
            foreach (string k in gottenPackages) {
                packages += k + ";";
            }

            string uuid = Guid.NewGuid().ToString().Replace("-", "").ToLower();

            saveUrl = UriHelper.GetBaseUri() + "console?" + G.consoleId + "#" + packages;
            string getUrl = G.hostname + "/api/v1/fetch/zip";


            HttpClient client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(120);
            HttpResponseMessage resp;
            try {
                HttpRequestMessage message = new HttpRequestMessage {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri(getUrl),
                    Headers = {
                        { "SDSETUP-UUID", uuid },
                        { "SDSETUP-PACKAGESET", G.packageset },
                        { "SDSETUP-CHANNEL", G.channel },
                        { "SDSETUP-PACKAGES", packages }
                    }
                };


                resp = await client.SendAsync(message);
            } catch (Exception e) {
                Console.WriteLine("Failed: \n" + e.Message + "\n\n" + e.StackTrace);
                Shared.MainLayout.downloadFailed = true;
                gettingZip = false;
                StateHasChanged();
                Shared.MainLayout.ForceUiRefresh();
                return;
            }
            if (!resp.IsSuccessStatusCode) {
                if ((int) resp.StatusCode == 429) {
                    Shared.MainLayout.rateLimited = true;
                    gettingZip = false;
                    Shared.MainLayout.ForceUiRefresh();
                    StateHasChanged();
                    return;
                } else {
                    Shared.MainLayout.downloadFailed = true;
                    gettingZip = false;
                    Shared.MainLayout.ForceUiRefresh();
                    StateHasChanged();
                    return;
                }
            }
            string tresp = await resp.Content.ReadAsStringAsync();
            if (tresp == "READY") {
                UriHelper.NavigateTo(G.hostname + "/api/v1/fetch/generatedzip/" + uuid);

                saveMessage = true;
                gettingZip = false;
                StateHasChanged();
            } else {
                Console.WriteLine("Something went wrong when requesting the zip from the server");
            }


        }

        private string UUID() {
            return new Guid().ToString();
        }

        private async void GetZip(string getUrl) {
            using (HttpClientDownloadWithProgress client = new HttpClientDownloadWithProgress(getUrl, "bundle.zip")) {

                client.ProgressChangedAction = new Action(() => {
                    total = 100;
                    current = client.percentage;
                    barMode = false;
                    StateHasChanged();
                });

                await client.StartDownload();
            }
        }


	}
